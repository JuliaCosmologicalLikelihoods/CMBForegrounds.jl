var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Blackbody-Physics-Functions","page":"API Reference","title":"Blackbody Physics Functions","text":"","category":"section"},{"location":"api/#CMBForegrounds.dimensionless_freq_vars","page":"API Reference","title":"CMBForegrounds.dimensionless_freq_vars","text":"dimensionless_freq_vars(ν, ν0, T)\n\nCalculates dimensionless frequency variables used in blackbody-related calculations.\n\nThe variables are defined as:\n\nr = nu  nu_0\nx = frachnuk_B T\nx_0 = frachnu_0k_B T\n\nwhere h is the Planck constant and k_B is the Boltzmann constant.\n\nArguments\n\nν: Frequency in GHz\nν0: Reference frequency in GHz\nT: Temperature in Kelvin\n\nReturns\n\nA tuple (r, x, x0) containing the dimensionless variables\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.Bnu_ratio","page":"API Reference","title":"CMBForegrounds.Bnu_ratio","text":"Bnu_ratio(ν, ν0, T)\n\nComputes the ratio of Planck blackbody intensities at two frequencies.\n\nThe Planck function ratio is:\n\nfracB(nu T)B(nu_0 T) = left(fracnunu_0right)^3 fracexp(hnu_0k_B T) - 1exp(hnuk_B T) - 1\n\nArguments\n\nν: Frequency in GHz\nν0: Reference frequency in GHz\nT: Temperature in Kelvin\n\nReturns\n\nDimensionless ratio B(ν, T) / B(ν0, T)\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.dBdT_ratio","page":"API Reference","title":"CMBForegrounds.dBdT_ratio","text":"dBdT_ratio(ν, ν0, T)\n\nComputes the ratio of blackbody temperature derivatives at two frequencies.\n\nThe derivative ratio is:\n\nfracpartial B(nu T)partial Tpartial B(nu_0 T)partial T = left(fracnunu_0right)^4 fracx_0^2 exp(x_0)(exp(x_0) - 1)^2x^2 exp(x)(exp(x) - 1)^2\n\nwhere x = hnu(k_B T) and x_0 = hnu_0(k_B T).\n\nArguments\n\nν: Frequency in GHz\nν0: Reference frequency in GHz\nT: Temperature in Kelvin\n\nReturns\n\nDimensionless ratio (∂B/∂T)(ν, T) / (∂B/∂T)(ν0, T)\n\n\n\n\n\n","category":"function"},{"location":"api/#Thermal-Sunyaev-Zel'dovich-Functions","page":"API Reference","title":"Thermal Sunyaev-Zel'dovich Functions","text":"","category":"section"},{"location":"api/#CMBForegrounds.tsz_g_ratio","page":"API Reference","title":"CMBForegrounds.tsz_g_ratio","text":"tsz_g_ratio(ν, ν0, T)\n\nCalculates the spectral shape of the thermal Sunyaev-Zel'dovich (tSZ) effect.\n\nThe tSZ spectral function is:\n\ng(x) = x cothleft(fracx2right) - 4\n\nwhere x = hnu(k_B T). This function returns g(x)  g(x_0).\n\nArguments\n\nν: Frequency in GHz\nν0: Reference frequency in GHz\nT: CMB temperature in Kelvin\n\nReturns\n\nDimensionless ratio g(ν) / g(ν0) of tSZ spectral function\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.tsz_cross_power","page":"API Reference","title":"CMBForegrounds.tsz_cross_power","text":"tsz_cross_power(template, A_tSZ, ν1, ν2, ν0, α_tSZ, ℓ_pivot, ℓs; T_CMB=T_CMB)\n\nComputes the thermal Sunyaev-Zel'dovich cross-power spectrum.\n\nThe tSZ power spectrum is:\n\nD_ell^mathrmtSZ(nu_1 nu_2) = A_mathrmtSZ cdot g(nu_1) cdot g(nu_2) cdot T(ell) cdot left(fracellell_mathrmpivotright)^alpha_mathrmtSZ\n\nwhere T(ell) is the template and g(nu) is the tSZ spectral function.\n\nArguments\n\ntemplate: tSZ power spectrum template Dℓ at reference frequency\nA_tSZ: tSZ amplitude at pivot scale\nν1, ν2: Frequencies in GHz of correlated channels\nν0: Reference frequency in GHz\nα_tSZ: Power-law tilt of tSZ spectrum\nℓ_pivot: Pivot multipole for power-law scaling\nℓs: Multipoles for computation\n\nKeywords\n\nT_CMB=T_CMB: CMB temperature in Kelvin\n\nReturns\n\ntSZ cross-power spectrum Dℓ\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.tsz_cib_cross_power","page":"API Reference","title":"CMBForegrounds.tsz_cib_cross_power","text":"tsz_cib_cross_power(ℓs, ξ, A_tSZ, A_CIB, α, β, z1, z2, ν_cib1, ν_cib2, ν_tsz1, ν_tsz2, α_tsz, tsz_template, ν0_tsz, Tdust, ν0_cib; ℓ_pivot_cib=3000, ℓ_pivot_tsz=3000, T_CMB=T_CMB)\n\nComputes the cross-correlation between thermal SZ and cosmic infrared background.\n\nThe tSZ-CIB cross-power spectrum is:\n\nD_ell^mathrmtSZ times CIB = -xi left( sqrtD_ell^mathrmtSZ11 cdot D_ell^mathrmCIB22 + sqrtD_ell^mathrmtSZ22 cdot D_ell^mathrmCIB11 right)\n\nwhere xi is the correlation coefficient and auto-spectra are computed for each component.\n\nArguments\n\nℓs: Vector of multipoles.\nξ: tSZ-CIB correlation coefficient.\nA_tSZ, A_CIB: Amplitudes for the tSZ and CIB power spectra.\nα, β: Power-law indices for the CIB model.\nz1, z2: Redshifts for the CIB channels.\nν_cib1, ν_cib2: Frequencies for the CIB channels.\nν_tsz1, ν_tsz2: Frequencies for the tSZ channels.\nα_tsz: The power-law tilt of the tSZ power spectrum.\ntsz_template: Power spectrum template for the tSZ effect.\nν0_tsz, ν0_cib: Reference frequencies for the tSZ and CIB models.\nTdust: Dust temperature for the CIB model.\n\nKeywords\n\nℓ_pivot_cib: Pivot multipole for the CIB power spectrum; default is 3000.\nℓ_pivot_tsz: Pivot multipole for the tSZ power spectrum; default is 3000.\nT_CMB: Temperature of the CMB.\n\nReturns\n\nAn AbstractVector of the tSZ-CIB cross-power spectrum Dℓ.\n\n\n\n\n\n","category":"function"},{"location":"api/#CIB-and-Dust-Functions","page":"API Reference","title":"CIB and Dust Functions","text":"","category":"section"},{"location":"api/#CMBForegrounds.cib_mbb_sed_weight","page":"API Reference","title":"CMBForegrounds.cib_mbb_sed_weight","text":"cib_mbb_sed_weight(β, Tdust, ν0, ν; T_CMB=T_CMB)\n\nCalculates the spectral energy distribution weight for modified blackbody emission.\n\nThe CIB modified blackbody SED weight is:\n\nS(nu) = left(fracnunu_0right)^beta fracB(nu T_mathrmdust)B(nu_0 T_mathrmdust) frac(partial Bpartial T)(nu_0 T_mathrmCMB)(partial Bpartial T)(nu T_mathrmCMB)\n\nwhere B(nu T) is the Planck function and beta is the dust emissivity index.\n\nArguments\n\nβ: Dust emissivity spectral index\nTdust: Dust temperature in Kelvin\nν0: Reference frequency in GHz\nν: Evaluation frequency in GHz\n\nKeywords\n\nT_CMB=T_CMB: CMB temperature in Kelvin\n\nReturns\n\nDimensionless SED weight\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.dust_tt_power_law","page":"API Reference","title":"CMBForegrounds.dust_tt_power_law","text":"dust_tt_power_law(ℓs, A_pivot, α, β, ν1, ν2, Tdust, ν0; ℓ_pivot=80, T_CMB=T_CMB)\n\nComputes thermal dust power spectrum using a power-law model.\n\nThe dust power spectrum is:\n\nD_ell^mathrmdust(nu_1 nu_2) = A_mathrmpivot cdot S(nu_1) cdot S(nu_2) cdot left(fracellell_mathrmpivotright)^alpha + 2\n\nwhere S(nu) is the modified blackbody SED weight and the +2 converts from C_ell to D_ell scaling.\n\nArguments\n\nℓs: Multipoles vector\nA_pivot: Amplitude at pivot multipole\nα: Power-law index for multipole dependence\nβ: Dust emissivity spectral index\nν1, ν2: Frequencies in GHz for cross-correlation\nTdust: Dust temperature in Kelvin\nν0: Reference frequency in GHz\n\nKeywords\n\nℓ_pivot=80: Pivot multipole\nT_CMB=T_CMB: CMB temperature\n\nReturns\n\nDust power spectrum Dℓ\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.cib_clustered_power","page":"API Reference","title":"CMBForegrounds.cib_clustered_power","text":"cib_clustered_power(ℓs, A_CIB, α, β, ν1, ν2, z1, z2, Tdust, ν0_cib; ℓ_pivot=3000, T_CMB=T_CMB)\n\nComputes the clustered cosmic infrared background power spectrum.\n\nThe CIB clustered power spectrum is:\n\nD_ell^mathrmCIB(nu_1 nu_2) = A_mathrmCIB cdot S(nu_1) cdot S(nu_2) cdot sqrtz_1 z_2 cdot left(fracellell_mathrmpivotright)^alpha\n\nwhere S(nu) are the modified blackbody SED weights and z_i are redshift factors.\n\nThis function handles both auto-spectra (when ν1=ν2 and z1=z2) and cross-spectra.\n\nArguments\n\nℓs: An AbstractVector of multipoles.\nA_CIB: Amplitude of the CIB power spectrum at the pivot multipole.\nα: Power-law index for the multipole dependence.\nβ: Spectral index for the dust emissivity (modified blackbody).\nν1: First frequency in GHz.\nν2: Second frequency in GHz.\nz1: First redshift factor (related to flux normalization).\nz2: Second redshift factor (related to flux normalization).\nTdust: Dust temperature in Kelvin.\nν0_cib: Reference frequency for the CIB SED in GHz.\n\nKeywords\n\nℓ_pivot: Pivot multipole where amplitude is defined, default is 3000.\nT_CMB: Temperature of the CMB in Kelvin, default is T_CMB constant.\n\nReturns\n\nAn AbstractVector containing the CIB clustered power spectrum D_ℓ at each ℓ in ℓs.\n\nExamples\n\n# Auto-spectrum at 353 GHz\nD_ℓ_auto = cib_clustered_power(ℓs, 1.0, 0.8, 1.6, 353.0, 353.0, 1.0, 1.0, 25.0, 150.0)\n\n# Cross-spectrum between 217 and 353 GHz  \nD_ℓ_cross = cib_clustered_power(ℓs, 1.0, 0.8, 1.6, 217.0, 353.0, 0.9, 1.1, 25.0, 150.0)\n\n\n\n\n\n","category":"function"},{"location":"api/#Other-Foreground-Functions","page":"API Reference","title":"Other Foreground Functions","text":"","category":"section"},{"location":"api/#CMBForegrounds.ksz_template_scaled","page":"API Reference","title":"CMBForegrounds.ksz_template_scaled","text":"ksz_template_scaled(template, AkSZ)\n\nScales a kinematic Sunyaev-Zel'dovich (kSZ) power spectrum template by a given amplitude.\n\nArguments\n\ntemplate: An AbstractVector representing the kSZ power spectrum shape Dℓ.\nAkSZ: The amplitude scaling factor.\n\nReturns\n\nAn AbstractVector containing the scaled kSZ power spectrum.\n\n\n\n\n\n","category":"function"},{"location":"api/#Response-and-Utility-Functions","page":"API Reference","title":"Response and Utility Functions","text":"","category":"section"},{"location":"api/#CMBForegrounds.ssl_response","page":"API Reference","title":"CMBForegrounds.ssl_response","text":"ssl_response(ℓs, κ, Dℓ)\n\nCalculates the super-sample lensing response in the power spectrum.\n\nThe SSL response is:\n\nDelta D_ell^mathrmSSL = -kappa left ell fracell(ell+1)2pi fracmathrmdC_ellmathrmdell + 2 D_ell right\n\nwhere kappa is the convergence field and C_ell = D_ell cdot 2piell(ell+1).\n\nArguments\n\nℓs: Multipoles vector\nκ: Convergence field value\nDℓ: Unperturbed power spectrum\n\nReturns\n\nChange in power spectrum due to SSL\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.aberration_response","page":"API Reference","title":"CMBForegrounds.aberration_response","text":"aberration_response(ℓs, ab_coeff, Dℓ)\n\nCalculates the relativistic aberration response in the power spectrum.\n\nThe aberration response is:\n\nDelta D_ell^mathrmaberr = -A_mathrmaberr cdot ell fracell(ell+1)2pi fracmathrmdC_ellmathrmdell\n\nwhere A_mathrmaberr is the aberration coefficient related to observer velocity.\n\nArguments\n\nℓs: Multipoles vector\nab_coeff: Aberration coefficient\nDℓ: Unperturbed power spectrum\n\nReturns\n\nChange in power spectrum due to aberration\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.gaussian_beam_window","page":"API Reference","title":"CMBForegrounds.gaussian_beam_window","text":"gaussian_beam_window(fwhm_arcmin, ells)\n\nCalculates the Gaussian beam window function.\n\nThe beam window function is:\n\nB_ell = expleft(-frac12 ell(ell + 1) sigma^2right)\n\nwhere sigma = mathrmFWHM  sqrt8 ln 2 is the beam standard deviation in radians.\n\nArguments\n\nfwhm_arcmin: Beam FWHM in arcminutes\nells: Multipoles vector\n\nReturns\n\nBeam window function values\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.fwhm_arcmin_to_sigma_rad","page":"API Reference","title":"CMBForegrounds.fwhm_arcmin_to_sigma_rad","text":"fwhm_arcmin_to_sigma_rad(fwhm_arcmin)\n\nConverts a beam's Full-Width at Half-Maximum (FWHM) from arcminutes to its standard deviation (sigma) in radians.\n\nArguments\n\nfwhm_arcmin: The FWHM in units of arcminutes.\n\nReturns\n\nThe beam sigma in units of radians.\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.shot_noise_power","page":"API Reference","title":"CMBForegrounds.shot_noise_power","text":"shot_noise_power(ℓs, A_ℓ0; ℓ0=3000)\n\nComputes shot noise power spectrum with ℓ² scaling.\n\nThe shot noise power spectrum is:\n\nD_ell^mathrmshot = A_ell_0 left(fracellell_0right)^2\n\nThis represents the white noise contribution from point sources.\n\nArguments\n\nℓs: Multipoles vector\nA_ℓ0: Shot noise amplitude at reference multipole\n\nKeywords\n\nℓ0=3000: Reference multipole\n\nReturns\n\nShot noise power spectrum Dℓ\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.dCl_dell_from_Dl","page":"API Reference","title":"CMBForegrounds.dCl_dell_from_Dl","text":"dCl_dell_from_Dl(ℓs, Dℓ)\n\nCalculates the derivative of the angular power spectrum.\n\nConverts from D_ell to C_ell derivative using:\n\nfracmathrmdC_ellmathrmdell = fracmathrmdmathrmdellleftD_ell frac2piell(ell+1)right\n\nThe derivative is computed using central differences for interior points.\n\nArguments\n\nℓs: Multipoles vector\nDℓ: Power spectrum D_\\ell values\n\nReturns\n\nDerivative dCℓ/dℓ\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBForegrounds.cross_calibration_mean","page":"API Reference","title":"CMBForegrounds.cross_calibration_mean","text":"cross_calibration_mean(cal1, cal2, cal3, cal4)\n\nCalculates the mean of two cross-calibration products. This is a simple utility function, often used for combining calibration factors from different frequency maps.\n\nArguments\n\ncal1, cal2, cal3, cal4: Calibration factors.\n\nReturns\n\nThe mean value: (cal1 * cal2 + cal3 * cal4) / 2.\n\n\n\n\n\n","category":"function"},{"location":"api/#Constants","page":"API Reference","title":"Constants","text":"","category":"section"},{"location":"api/#CMBForegrounds.T_CMB","page":"API Reference","title":"CMBForegrounds.T_CMB","text":"T_CMB\n\nThe temperature of the Cosmic Microwave Background in Kelvin (2.72548 K).\n\n\n\n\n\n","category":"constant"},{"location":"api/#CMBForegrounds.h","page":"API Reference","title":"CMBForegrounds.h","text":"h\n\nPlanck's constant in J⋅s (6.62606957×10⁻³⁴ J⋅s).\n\n\n\n\n\n","category":"constant"},{"location":"api/#CMBForegrounds.kB","page":"API Reference","title":"CMBForegrounds.kB","text":"kB\n\nBoltzmann constant in J/K (1.3806488×10⁻²³ J/K).\n\n\n\n\n\n","category":"constant"},{"location":"api/#CMBForegrounds.Ghz_Kelvin","page":"API Reference","title":"CMBForegrounds.Ghz_Kelvin","text":"Ghz_Kelvin\n\nConversion factor h/kB × 10⁹ for converting between frequency (GHz) and temperature (K).\n\n\n\n\n\n","category":"constant"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"#CMBForegrounds.jl","page":"Home","title":"CMBForegrounds.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A general-purpose Julia package for building CMB likelihoods with foreground and systematic effect modeling","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CMBForegrounds.jl is designed as a foundational tool for constructing Cosmic Microwave Background (CMB) likelihoods. The package provides well-tested, optimized, and differentiable functions for modeling the most relevant and commonly employed functional forms for:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Astrophysical foregrounds (galactic dust, synchrotron, free-free emission)\nSecondary anisotropies (thermal and kinematic Sunyaev-Zel'dovich effects)\nInstrumental systematics and calibration effects\nSpectral energy distributions and frequency-dependent responses","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Well-tested: Comprehensive test suite with 158+ unit tests ensuring numerical accuracy\nOptimized: Efficient implementations of spectral functions and frequency transformations\nDifferentiable: Compatible with automatic differentiation frameworks for gradient-based inference\nGeneral-purpose: Flexible building blocks for custom likelihood implementations\nStandards-compliant: Follows Julia community best practices and conventions","category":"page"},{"location":"#Core-Functionality","page":"Home","title":"Core Functionality","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package provides fundamental spectral functions including:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Planck function ratios and temperature derivatives\nThermal Sunyaev-Zel'dovich (tSZ) spectral functions\nDimensionless frequency variables for blackbody calculations\nPhysical constants and unit conversions","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"CMBForegrounds\")","category":"page"},{"location":"#Physical-Constants","page":"Home","title":"Physical Constants","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package includes several important physical constants used in CMB analysis:","category":"page"},{"location":"","page":"Home","title":"Home","text":"T_CMB: CMB temperature (2.72548 K)\nh: Planck constant \nkB: Boltzmann constant\nGhz_Kelvin: Conversion factor h/kB × 10⁹","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
